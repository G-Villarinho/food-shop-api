// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"
)

// EvaluationService is an autogenerated mock type for the EvaluationService type
type EvaluationService struct {
	mock.Mock
}

// CreateEvaluation provides a mock function with given fields: ctx, payload
func (_m *EvaluationService) CreateEvaluation(ctx context.Context, payload models.CreateEvaluationPayload) (*models.EvaluationResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvaluation")
	}

	var r0 *models.EvaluationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateEvaluationPayload) (*models.EvaluationResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateEvaluationPayload) *models.EvaluationResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EvaluationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateEvaluationPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvaluationSumary provides a mock function with given fields: ctx
func (_m *EvaluationService) GetEvaluationSumary(ctx context.Context) (*models.EvaluationSummaryResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEvaluationSumary")
	}

	var r0 *models.EvaluationSummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.EvaluationSummaryResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.EvaluationSummaryResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EvaluationSummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedEvaluationsByRestaurantID provides a mock function with given fields: ctx, pagination
func (_m *EvaluationService) GetPaginatedEvaluationsByRestaurantID(ctx context.Context, pagination *models.EvaluationPagination) (*models.PaginatedResponse[*models.EvaluationResponse], error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedEvaluationsByRestaurantID")
	}

	var r0 *models.PaginatedResponse[*models.EvaluationResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.EvaluationPagination) (*models.PaginatedResponse[*models.EvaluationResponse], error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.EvaluationPagination) *models.PaginatedResponse[*models.EvaluationResponse]); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaginatedResponse[*models.EvaluationResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.EvaluationPagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnswer provides a mock function with given fields: ctx, payload
func (_m *EvaluationService) UpdateAnswer(ctx context.Context, payload models.UpdateAnswerPayload) (*models.EvaluationResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnswer")
	}

	var r0 *models.EvaluationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateAnswerPayload) (*models.EvaluationResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateAnswerPayload) *models.EvaluationResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EvaluationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UpdateAnswerPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEvaluationService creates a new instance of EvaluationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvaluationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvaluationService {
	mock := &EvaluationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
