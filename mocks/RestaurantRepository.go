// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RestaurantRepository is an autogenerated mock type for the RestaurantRepository type
type RestaurantRepository struct {
	mock.Mock
}

// CreateRestaurant provides a mock function with given fields: ctx, restaurant
func (_m *RestaurantRepository) CreateRestaurant(ctx context.Context, restaurant models.Restaurant) error {
	ret := _m.Called(ctx, restaurant)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestaurant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Restaurant) error); ok {
		r0 = rf(ctx, restaurant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRestaurantByID provides a mock function with given fields: ctx, ID
func (_m *RestaurantRepository) GetRestaurantByID(ctx context.Context, ID uuid.UUID) (*models.Restaurant, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetRestaurantByID")
	}

	var r0 *models.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Restaurant, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Restaurant); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestaurantByUserID provides a mock function with given fields: ctx, userID
func (_m *RestaurantRepository) GetRestaurantByUserID(ctx context.Context, userID uuid.UUID) (*models.Restaurant, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRestaurantByUserID")
	}

	var r0 *models.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Restaurant, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Restaurant); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestaurantIDByUserID provides a mock function with given fields: ctx, userID
func (_m *RestaurantRepository) GetRestaurantIDByUserID(ctx context.Context, userID uuid.UUID) (*uuid.UUID, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRestaurantIDByUserID")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*uuid.UUID, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *uuid.UUID); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRestaurantRepository creates a new instance of RestaurantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestaurantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestaurantRepository {
	mock := &RestaurantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
