// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// ApproveOrder provides a mock function with given fields: ctx, orderID
func (_m *OrderService) ApproveOrder(ctx context.Context, orderID uuid.UUID) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for ApproveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, orderID
func (_m *OrderService) CancelOrder(ctx context.Context, orderID uuid.UUID) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, custommerID, restaurantID, payload
func (_m *OrderService) CreateOrder(ctx context.Context, custommerID uuid.UUID, restaurantID uuid.UUID, payload models.CreateOrderPayload) error {
	ret := _m.Called(ctx, custommerID, restaurantID, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.CreateOrderPayload) error); ok {
		r0 = rf(ctx, custommerID, restaurantID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeliverOrder provides a mock function with given fields: ctx, orderID
func (_m *OrderService) DeliverOrder(ctx context.Context, orderID uuid.UUID) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for DeliverOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchOrder provides a mock function with given fields: ctx, orderID
func (_m *OrderService) DispatchOrder(ctx context.Context, orderID uuid.UUID) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for DispatchOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaginatedOrdersByRestaurantID provides a mock function with given fields: ctx, pagination
func (_m *OrderService) GetPaginatedOrdersByRestaurantID(ctx context.Context, pagination *models.OrderPagination) (*models.PaginatedResponse[*models.OrderResponse], error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedOrdersByRestaurantID")
	}

	var r0 *models.PaginatedResponse[*models.OrderResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrderPagination) (*models.PaginatedResponse[*models.OrderResponse], error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrderPagination) *models.PaginatedResponse[*models.OrderResponse]); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaginatedResponse[*models.OrderResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.OrderPagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
