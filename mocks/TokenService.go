// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: userID, sessionID
func (_m *TokenService) CreateToken(userID uuid.UUID, sessionID uuid.UUID) (string, error) {
	ret := _m.Called(userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (string, error)); ok {
		return rf(userID, sessionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) string); ok {
		r0 = rf(userID, sessionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractSessionID provides a mock function with given fields: token
func (_m *TokenService) ExtractSessionID(token string) (uuid.UUID, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ExtractSessionID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uuid.UUID, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) uuid.UUID); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
