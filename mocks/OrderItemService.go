// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderItemService is an autogenerated mock type for the OrderItemService type
type OrderItemService struct {
	mock.Mock
}

// ValidateAndCalculateOrderItems provides a mock function with given fields: ctx, products, items
func (_m *OrderItemService) ValidateAndCalculateOrderItems(ctx context.Context, products []models.Product, items []models.CreateOrderItemPayload) (*models.OrderItemSummary, error) {
	ret := _m.Called(ctx, products, items)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAndCalculateOrderItems")
	}

	var r0 *models.OrderItemSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Product, []models.CreateOrderItemPayload) (*models.OrderItemSummary, error)); ok {
		return rf(ctx, products, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Product, []models.CreateOrderItemPayload) *models.OrderItemSummary); ok {
		r0 = rf(ctx, products, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrderItemSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Product, []models.CreateOrderItemPayload) error); ok {
		r1 = rf(ctx, products, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderItemService creates a new instance of OrderItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderItemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderItemService {
	mock := &OrderItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
