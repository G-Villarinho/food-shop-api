// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EvaluationRepository is an autogenerated mock type for the EvaluationRepository type
type EvaluationRepository struct {
	mock.Mock
}

// CreateEvaluation provides a mock function with given fields: ctx, evaluation
func (_m *EvaluationRepository) CreateEvaluation(ctx context.Context, evaluation models.Evaluation) error {
	ret := _m.Called(ctx, evaluation)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvaluation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Evaluation) error); ok {
		r0 = rf(ctx, evaluation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvaluationByID provides a mock function with given fields: ctx, evaluationID
func (_m *EvaluationRepository) GetEvaluationByID(ctx context.Context, evaluationID uuid.UUID) (*models.Evaluation, error) {
	ret := _m.Called(ctx, evaluationID)

	if len(ret) == 0 {
		panic("no return value specified for GetEvaluationByID")
	}

	var r0 *models.Evaluation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Evaluation, error)); ok {
		return rf(ctx, evaluationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Evaluation); ok {
		r0 = rf(ctx, evaluationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Evaluation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, evaluationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvaluationSumaryByRestaurantID provides a mock function with given fields: ctx, restaurantID
func (_m *EvaluationRepository) GetEvaluationSumaryByRestaurantID(ctx context.Context, restaurantID uuid.UUID) ([]models.EvaluationSummary, error) {
	ret := _m.Called(ctx, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for GetEvaluationSumaryByRestaurantID")
	}

	var r0 []models.EvaluationSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.EvaluationSummary, error)); ok {
		return rf(ctx, restaurantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.EvaluationSummary); ok {
		r0 = rf(ctx, restaurantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.EvaluationSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedEvaluationsByRestaurantID provides a mock function with given fields: ctx, restaurantID, pagination
func (_m *EvaluationRepository) GetPaginatedEvaluationsByRestaurantID(ctx context.Context, restaurantID uuid.UUID, pagination *models.EvaluationPagination) (*models.PaginatedResponse[models.Evaluation], error) {
	ret := _m.Called(ctx, restaurantID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedEvaluationsByRestaurantID")
	}

	var r0 *models.PaginatedResponse[models.Evaluation]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.EvaluationPagination) (*models.PaginatedResponse[models.Evaluation], error)); ok {
		return rf(ctx, restaurantID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.EvaluationPagination) *models.PaginatedResponse[models.Evaluation]); ok {
		r0 = rf(ctx, restaurantID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaginatedResponse[models.Evaluation])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.EvaluationPagination) error); ok {
		r1 = rf(ctx, restaurantID, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnswer provides a mock function with given fields: ctx, evaluationID, answer
func (_m *EvaluationRepository) UpdateAnswer(ctx context.Context, evaluationID uuid.UUID, answer string) error {
	ret := _m.Called(ctx, evaluationID, answer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnswer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, evaluationID, answer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEvaluationRepository creates a new instance of EvaluationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvaluationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvaluationRepository {
	mock := &EvaluationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
