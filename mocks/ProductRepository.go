// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) CreateProduct(ctx context.Context, product models.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ctx, productIDs, restaurantID
func (_m *ProductRepository) DeleteMany(ctx context.Context, productIDs []uuid.UUID, restaurantID uuid.UUID) error {
	ret := _m.Called(ctx, productIDs, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, productIDs, restaurantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPopularProducts provides a mock function with given fields: ctx, restaurantID, limit
func (_m *ProductRepository) GetPopularProducts(ctx context.Context, restaurantID uuid.UUID, limit int) ([]models.PopularProduct, error) {
	ret := _m.Called(ctx, restaurantID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularProducts")
	}

	var r0 []models.PopularProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) ([]models.PopularProduct, error)); ok {
		return rf(ctx, restaurantID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) []models.PopularProduct); ok {
		r0 = rf(ctx, restaurantID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PopularProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = rf(ctx, restaurantID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, ID
func (_m *ProductRepository) GetProductByID(ctx context.Context, ID uuid.UUID) (*models.Product, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Product, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Product); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByIDsAndRestaurantID provides a mock function with given fields: ctx, productIDs, restaurantID
func (_m *ProductRepository) GetProductsByIDsAndRestaurantID(ctx context.Context, productIDs []uuid.UUID, restaurantID uuid.UUID) ([]models.Product, error) {
	ret := _m.Called(ctx, productIDs, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByIDsAndRestaurantID")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) ([]models.Product, error)); ok {
		return rf(ctx, productIDs, restaurantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) []models.Product); ok {
		r0 = rf(ctx, productIDs, restaurantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, productIDs, restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByRestaurantID provides a mock function with given fields: ctx, restaurantID
func (_m *ProductRepository) GetProductsByRestaurantID(ctx context.Context, restaurantID uuid.UUID) ([]models.Product, error) {
	ret := _m.Called(ctx, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByRestaurantID")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Product, error)); ok {
		return rf(ctx, restaurantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Product); ok {
		r0 = rf(ctx, restaurantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
