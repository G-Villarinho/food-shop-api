// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/food-shop-api/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: ctx, userID, restaurantID, role
func (_m *SessionService) CreateSession(ctx context.Context, userID uuid.UUID, restaurantID *uuid.UUID, role models.Role) (*models.Session, error) {
	ret := _m.Called(ctx, userID, restaurantID, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID, models.Role) (*models.Session, error)); ok {
		return rf(ctx, userID, restaurantID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID, models.Role) *models.Session); ok {
		r0 = rf(ctx, userID, restaurantID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *uuid.UUID, models.Role) error); ok {
		r1 = rf(ctx, userID, restaurantID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllSessions provides a mock function with given fields: ctx, userID
func (_m *SessionService) DeleteAllSessions(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *SessionService) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSessionByToken provides a mock function with given fields: ctx, token
func (_m *SessionService) GetSessionByToken(ctx context.Context, token string) (*models.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByToken")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionsByUserID provides a mock function with given fields: ctx, userID
func (_m *SessionService) GetSessionsByUserID(ctx context.Context, userID uuid.UUID) ([]*models.Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionsByUserID")
	}

	var r0 []*models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*models.Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*models.Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
